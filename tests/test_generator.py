import os
import types
from parameterized import parameterized
from unittest import TestCase
from swagger_django_generator.generator import Generator, BACKEND_CHOICES

# The specs that are commented out currently fails to be parsed.
# Since I am using an existing parser, there is not mut I can do about
# it at this stage. Just leaving it here for completeness' sake.
ALL_TEST_SPECIFICATIONS = [
    "tests/resources/allOfTest.yaml",
    "tests/resources/binaryDataTest.json",
    "tests/resources/allOfTest.yaml",
    "tests/resources/binaryDataTest.json",
    # "tests/resources/discriminatorTest.json",
    "tests/resources/duplicateOperationIds.yaml",
    "tests/resources/fileResponseTest.json",
    "tests/resources/globalConsumesAndProduces.json",
    "tests/resources/globalSecurity.json",
    "tests/resources/markdown.yaml",
    # "tests/resources/pathWithHtmlEntity.yaml",
    "tests/resources/petstore.json",
    "tests/resources/petstore.yaml",
    "tests/resources/petstore-bash.json",
    "tests/resources/petstore-orig.json",
    # "tests/resources/petstore-security-test.yaml",
    # "tests/resources/petstore-vendor-mime.yaml",
    # "tests/resources/petstore-with-fake-endpoints-models-for-testing.yaml",
    "tests/resources/postBodyTest.json",
    "tests/resources/requiredTest.json",
    "tests/resources/responseCodeTest.yaml",
    "tests/resources/responseHeaderTest.yaml",
    "tests/resources/responseSelectionTest.json",
    # "tests/resources/v1beta3.json",
    # "tests/resources/wordnik.json",
    # "tests/resources/wordnik.yaml",
]


class GeneratorTests(TestCase):

    def setUp(self):
        self.generators = [
            Generator(
                backend, "./", "urls.py", "views.py",
                "schemas.py", "utils.py", "stubs.py"
            ) for backend in BACKEND_CHOICES
        ]

    @parameterized.expand(ALL_TEST_SPECIFICATIONS)
    def test_file_parsing(self, spec_path):
        for generator in self.generators:
            generator.load_specification(spec_path)

    @parameterized.expand(ALL_TEST_SPECIFICATIONS)
    def test_that_generated_python_code_compiles(self, spec_path):
        """
        Checks that the code generated by the generator can be compiled.
        This only guarantees syntactical correctness.
        :param spec_path: The spec to base the code generation on
        :return:
        """
        for generator in self.generators:
            if generator.backend != "aor":
                generator.load_specification(spec_path)

                for func in [
                    generator.generate_schemas,
                    generator.generate_stubs,
                    generator.generate_urls,
                    generator.generate_utils,
                    generator.generate_views,
                ]:
                    generated_code = func()
                    self.assertIsInstance(compile(generated_code,
                                                  os.path.basename(spec_path),
                                                  "exec"),
                                          types.CodeType)

    def tearDown(self):
        pass

